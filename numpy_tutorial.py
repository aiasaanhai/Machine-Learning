# -*- coding: utf-8 -*-
"""NumPy Tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12cx7Y3WWp9lew8MZmmOXXKGtdHfOLKYB
"""



"""# What is NumPy

NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays.
"""



"""# Why use NumPy

In Python we have lists that serve the purpose of arrays, but they are slow to process.

NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.

The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.

Arrays are very frequently used in data science, where speed and resources are very important.

# Why is NumPy Faster Than Lists?

NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently.

This behavior is called locality of reference in computer science.

This is the main reason why NumPy is faster than lists. Also it is optimized to work with latest CPU architectures.

# Importing NumPy
```Python
import numpy as np
```
"""

l = [4, 6, 'hi', 'hello']
l

a = [1,2,3] # a = [a[0], a[1], a[2]]
b = [4,5,6] # b = [b[0], b[1], b[2]]


c=[a[0]+b[0], a[1]+b[1], a[2]+b[2]]
c

import numpy as np

l = [1, 2, 3]

arr = np.array(l) # np.array([1, 2, 3])

print(type(l))
print(type(arr))

import numpy as np

a = [1, 2, 3]
b = [4, 5, 6]
print(a+b)

array_a = np.array(a)  #array_a = np.array([1,2,3])
array_b = np.array(b)  #array_b = np.array([4,5,6])
print(array_a + array_b)

a+b

np.concatenate((array_a, array_b))

"""# Arrays"""

#1-D array
import numpy as np

arr = np.array([1, 2, 3, 4, 5])

print(arr)

#2-D array
import numpy as np

arr = np.array([[1, 2, 3], [4, 5, 6]])

print(f'Matrix is: \n{arr}')
print(f'Shape of the matrix is: {arr.shape}')

# create a matrix of size (3, 2)
l = [[1, 2], [3, 4], [5, 6]]
array_3_2 = np.array(l)
print(f'array is: \n{array_3_2}')
print(f'Shape of the array is: \n{array_3_2.shape}')

np.sum(arr, axis=1)

#3-D array

import numpy as np

arr = np.array([ [[1, 2, 3], [4, 5, 6]], [[1, 2, 31], [4, 5, 6]] ])

print(arr)

print(arr.shape)

arr_1 = np.array([[1, 2, 3], [4, 5, 6]]) #shape = 2X3
arr_2 = np.array([[1, 2], [3, 4], [5, 6]]) #shape 3X2
# print(arr_1 * arr_2)

print(np.dot(arr_1, arr_2))

"""# Fill the blanks to generate the following Matrix
$$\begin{bmatrix} 1 & 2 & 1 \\ 3 & 0 & 1 \\ 0 & 2 & 4 \end{bmatrix}$$
"""

mat = np.array([ [1, 2, 1], [3, 0, 1], [0, 2, 4]])
print(mat)

#arange function

a = np.arange(0,10,2)

# b = np.arange(0,10,2) #(start, end, skip)

c = np.arange(-10,10, 0.5)

c

"""# Fill the blank to generate the following  vector
$$\begin{bmatrix} -30 & -20 & -10 & 0 & 10 & 20 & 30 & 40 \end{bmatrix}$$

"""

p = np.arange(-30, 50, 10) #fill the blank
p

"""![numpy_arrays-1024x572.png](attachment:numpy_arrays-1024x572.png)"""

#reshape function

arr = np.arange(4, 12)
# print(arr)
array_reshaped_1 = np.arange(4,12).reshape(2, 0) #reshape(row, columns)
array_reshaped_1

array_reshaped_1.ndim

array_reshaped_1.shape

array_reshaped_2 = np.arange(4.,12.).reshape(4,2)
array_reshaped_2

# data type of arrays and itemsize

print(array_reshaped_1.dtype)

print(array_reshaped_2.dtype)

print(array_reshaped_1.itemsize)
print(array_reshaped_2.itemsize)

#array_int_item = np.array([1,2,3,4,5,6,7,8,9], dtype='int64')
array_int_item = np.arange(1,10, dtype='int16')

#array_float_item = np.array([1,2,3,4,5,6,7,8,9], dtype='float64')
#fill the blank
array_float_item=np.arange(1,10, dtype='float32')

print(array_int_item)
print(array_float_item)

print(array_int_item.dtype)
print(array_float_item.dtype)

print(array_float_item.itemsize)
print(array_int_item.itemsize)

"""# Fill the blanks to generate the following matrix
$$\begin{bmatrix} 1.5 & 2.5 & 3.5 \\ 4.5 & 5.5 & 6.5  \\ 7.5 & 8.5 & 9.5  \end{bmatrix}$$
"""

float_array = np.arange(1.5,10.5, 1, dtype='float64').reshape(3, 3)

print(float_array)

#array full of zeros and ones

zero_array = np.zeros((2,3), dtype='float64')

one_array = np.ones((2,3), dtype='float64')

full_array = np.full((2,2), 99, dtype='float64')

full_array

#randoms

random_array_1 = np.random.rand(4,2)
print(random_array_1)

random_array_2 = np.random.randint(-4,7, size=(3,3))

print(random_array_2)

random_array_3 = np.random.randint(0, 8, size=(3,3))

print(random_array_3)



"""# access elements"""

a = np.arange(25).reshape(5,5)

print(a)

print(a[:, :])

print(a[0:5, 0:5])

print(a[0:5:1, 0:5:1])

a = np.arange(25,50).reshape(5, -1)
print(a)
print(a[1:4:2,1:4:2])  #[start:end:skip, start:end:skip]

check_reshape = np.arange(25,50).reshape(5,5)
print(check_reshape)
print(check_reshape.shape)

reshaped = check_reshape.reshape(1,25)

print(reshaped)
print(reshaped.shape)

"""# fill the blanks to print the following matrix
$$\begin{bmatrix} 1 & 1 & 1 & 1 & 1 \\ 1 & 0 & 0 & 0 & 1  \\ 1 & 0 & 9 & 0 & 1 \\ 1 & 0 & 0 & 0 & 1 \\1 & 1 & 1 & 1 & 1 \end{bmatrix}$$
"""

a = np.ones((5,5), dtype='int64')
b = np.zeros((3,3))
b[1, 1]=9   #fill this blank
a[1:-1, 1:-1]=b   #fill this blank
a

"""# Mathematics"""

a = np.array([1,2,3,4], dtype='int64')

print(a+2)
print(a*2)
print(a**2)
print(a/2)

angles = np.arange(30,360,30)*np.pi/180 #angles in radians..

sin_values = np.sin(angles)
sin_values

a = np.arange(20,30).reshape(2,5)

b = np.arange(30,40).reshape(5,2)

c = np.matmul(a,b)

print(np.linalg.det(c))

print(np.linalg.eig(c))

print(np.linalg.norm(c))

print(np.linalg.matrix_rank(c))

a = np.array([[1,3], [0,1]])
b = np.array([[1,-1], [0,1]])

print(np.linalg.solve(a,b))  #ax=b => x=b*a^-1

print(np.matmul(np.linalg.inv(a), b))
print(a)
print(b)

import numpy as np

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_data = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])

# Solution
iris_data[(iris_data[:, 2] > 1.5) & (iris_data[:, 0] < 5.0)]

n = np.array([1,2,3,4])
n = n.reshape((2,-1))
n